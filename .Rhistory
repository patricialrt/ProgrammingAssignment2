library(datasets)
data("airquality")
qplot(Wind, Ozone, data= airquality, geom= "smooth")
install.packages(ggplot2)
library("ggplot2")
install.packages("ggplot2")
library("ggplot2")
qplot(Wind, Ozone, data= airquality, geom= "smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data= airquality, facets = . ~Month)
data("airquality")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(month.abb))
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality)
library(datasets)
data("iris")
?iris
head(iris)
viginica <- iris[ which(iris$Species == "virginica")]
viginica <- iris[ which(iris$Species == "virginica"),]
head(viginica)
mean(viginica$Sepal.Length)
apply(iris[, 1:4], 2, mean)
mean(iris$Sepal.Length)
library(datasets)
data("mtcars")
head(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
split(mtcars, mtcars$cyl)
lapply(mtcars, mean)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
26.66364-15.1
debug(ls)
ls
ls()
library(swirl)
ls()
rm(list=ls())
swirl()
1:20
pi:10
15:1
?:
?":"
seq(1,20)
seq(0,10, by=0.5)
seq(5,10, length=30)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each=10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect<1
tf
z  <- num_vect>= 6
num_vect>= 6
my_char  <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
c(my_char, "Patricia")
my_name <- c(my_char, "Patricia")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c(1:3), c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x*3
y
y <- rnorm(1000)
z <- rep(NA, 100)
z <- rep(NA, 1000)
my_data  <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data== NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
c(foo=11, bar=2, norf=NA)
vect <- c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
1
vect["bar"]
vect[c("foo", "bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim()
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix  <- my_vector
?matrix
my_matrix2 <- matrix(data=1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients  <- c("Bill", "Gina", "Kelly", "Sean")
cbind(my_matrix, patients)
cbind(patients, my_matrix)
my_data  <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames  <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
TRUE=TRUE
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
5!=7
5!==7
5 !== 7
!5==7
FALSE&FALSe
FALSE&FALSE
TRUE&c(TRUE, TRUE, TRUE)
TRUE&c(TRUE, FALSE, FALSE)
TRUE&&c(TRUE, FALSE, FALSE)
TRUE|c(TRUE, FALSE, FALSE)
TRUE||c(TRUE, FALSE, FALSE)
5>8||6!=8&4>3,9
5>8 || 6 != 8 && 4>3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function("My first function")
boring_function(My first function!)
boring_function('My first function!')
boring_function
submit
submit()
my_vector <- c(4,5,10)
my_mean(c(4,5,10))
submit()
submit()
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
submit()
evaluate(median, c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x},c(8,4,0))
evaluate(function(x){'x'},c(8,4,0))
evaluate(function(x){c(x)},c(8,4,0))
evaluate(function(x){[x]},c(8,4,0))
evaluate(function(x){x[c]},c(8,4,0))
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[3]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit
submit
submit()
submit()
submit()
telegram(I'm hungry)
telegram(c("I'm", "hungry")
)
submit()
submit()
mad_libs(place= "Stockach", adjective= "ugly", noun= "townhall")
submit()
"I love" %p% "R!"
"I" %p% "love" %p% "R!"
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
cls_vect
class(cls_vect)
sum(flags$orange)
flag_colors  <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes  <- flags[, 19:23]
lapply(flag_shapes)
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals(lapply(flags, unique))
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_vals)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, functin(elem) elem[2])
lapply(unique_vals, functin(elem) elem[2])
lapply(unique_vals, functin(elem), elem[2])
lapply(unique_vals, functin(elem) elem[2])
lapply(unique_vals, function(elem) elem[2])
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, charachter(1))
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
table(flags$animate, flags$landmass, mean)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,n=10)
tail(plants, n=15)
summary(plants)
table(plant$Active_Growth_Period)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:10, 4)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(size = 100, prob = 0.7)
flips2 <- rbinom(1,size = 100, prob = 0.7)
flips2 <- rbinom(100,size = 1, prob = 0.7)
flips2
sum(flips)
sum(flips2)
rnorm()
?rnorm
rnorm(10)
rnorm(10, mean= 100,sd=25)
rpois(5, 10)
my_pois <- replicate(100, rpois(5,10))
head(my_pois)
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
clas(d1)
class(d1)
unclass(d1)
d1
d2 <- 1969-01-01
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass()
unlass(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d,%Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class()
class(t4)
Sys.time()>t1
Sys.time()-t1
difftime(Sys.time(), t1, units='days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$dist, y= cars$speed)
plot(x=cars$speed, y=cars$dist)
plot(x=cars$dist, y=cars$speed)
plot(x=cars$dist, y=cars$speed, xlab = "Speed")
plot(x=cars$speed, y=cars$dist, xlab = "Speed")
plot(x=cars$speed, y=cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x=cars$speed, y=cars$dist, ylab = "Stopping Distance")
plot(x=cars$speed, y=cars$dist, x= "Speed", ylab = "Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab = "Speed", ylab = "Stopping Distance", main = "My Plot")
plot(carsmain = "My Plot")
plot(cars,main = "My Plot")
plot(cars,main = "My Plot Subtitle")
plot(cars,sub() = "My Plot Subtitle")
plot(cars,sub = "My Plot Subtitle")
plot(cars,col=2)
plot(cars,xlim= c(10, 15))
plot(cars,pch = 2)
load(mtcars)
data(mtcars)
?boxplot
boxplot(formula= mpg~cyl, data = mtcars)
hist(mtcars$mpg)
info()
main()
x <<- y
get <- function() x
list(set= set, get = get,)
m <- x$getmean()
message("getting cached data")
submit()
cachemean(c(1,2,3))
}
source('~/makeVector.R')
source('~/cacheMean.R')
cachemean(c(1,2,3))
?cachemean
??cachemean
makeVector(x = numeric(length = 3L))
cachemean(x=numeric(length = 3L))
test  <- makeVector(x = numeric(length = 4L))
test
testCached  <- cachemean(test)
testCached
testCached
testCached
source('~/makeCacheMatrix.R')
source('~/cacheSolve.R')
test <- matrix(runif(9,1,100), 3,3)
test
testCached <- makeCacheMatrix(test)
testCached
testInv<- cacheSolve(testCached)
source('~/cacheSolve.R')
testInv<- cacheSolve(testCached)
testInv
m  <- matrix(c(-1,-2, 1, 1), 2, 2)
x  <- makeCacheMatrix(m)
x
x$get()
test$get
test$get()
inv <- cacheSolve(x)
inv
inv  <- cacheSolve(x)
inv
getwd
getwd()
setwd("~/Documents/ProgrammingAssignment2")
ls
ls()
